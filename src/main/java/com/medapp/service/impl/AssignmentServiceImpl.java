package com.medapp.service.impl;

import com.medapp.constants.ApplicationConstant;
import com.medapp.dao.api.AssignmentDAO;
import com.medapp.dao.api.EventDAO;
import com.medapp.dao.api.PatientDAO;
import com.medapp.dto.AssignmentDto;
import com.medapp.model.Assignment;
import com.medapp.model.Event;
import com.medapp.model.Patient;
import com.medapp.service.api.AssignmentService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.jms.JMSException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class AssignmentServiceImpl implements AssignmentService {

    private static final Logger LOGGER = Logger.getLogger(AssignmentService.class);
    private AssignmentDAO assignmentDAO;
    private PatientDAO patientDAO;
    private EventDAO eventDAO;

    @Autowired
    public void setEventDAO(EventDAO eventDAO) {
        this.eventDAO = eventDAO;
    }

    @Autowired
    public void setAssignmentDAO(AssignmentDAO assignmentDAO) {
        this.assignmentDAO = assignmentDAO;
    }

    @Autowired
    public void setPatientDAO(PatientDAO patientDAO) {
        this.patientDAO = patientDAO;
    }

    /**
     * convert AssignmentDto to Assignment and
     * transfer Assignment to dao.add().
     * Then generate Events by this Assignment.
     *
     * @param assignmentDto
     */
    @Override
    @Transactional
    public boolean add(AssignmentDto assignmentDto) {
            Patient patient = patientDAO.getById(assignmentDto.getPatientId());
            Assignment assignment = convertDtoToAssignment(new Assignment(), assignmentDto);
            assignment.setPatient(patientDAO.getById(assignmentDto.getPatientId()));
            Assignment a = assignmentDAO.add(assignment);
            generateEventsByAssId(a.getId());
            return true;
    }

    /**
     * Convert AssignmentDto to Assignment
     * and transfer Assignment to dao.update().
     * Then generate events by this Assignment.
     *
     * @param assignmentDto
     */
    @Override
    @Transactional
    public void update(AssignmentDto assignmentDto) throws JMSException {
        Assignment assignment = assignmentDAO.getById(assignmentDto.getId());
        assignmentDAO.update(convertDtoToAssignment(assignment, assignmentDto));
        deleteEventsByAssId(assignment.getId());
        generateEventsByAssId(assignment.getId());
    }

    /**
     * Delete Assignment through dao and
     * delete all Events generated by this assignment.
     *
     * @param assignmentId
     */
    @Override
    @Transactional
    public void deleteById(Long assignmentId) throws JMSException {
        eventDAO.deleteByAssignmentId(assignmentId);
        assignmentDAO.delete(assignmentId);
    }

    /**
     * Return patient's id
     * of assignment id.
     *
     * @param assId
     * @return id
     */
    @Override
    @Transactional
    public Long getPatientId(Long assId) {
        Assignment assignment = assignmentDAO.getById(assId);
        Patient patient = assignment.getPatient();
        return patient.getId();
    }

    @Override
    @Transactional
    /**
     *get All assignments by Assignment id
     *
     */
    public List<AssignmentDto> getAll(Long id) {
        List<Assignment> assignmentList = assignmentDAO.getAll(id);
        List<AssignmentDto> assignmentDtos = new ArrayList<>();
        for(Assignment assignment : assignmentList){
            AssignmentDto assignmentDto = convertAssignmentToDto(assignment);
            assignmentDtos.add(assignmentDto);
        }
        return assignmentDtos;
    }

    @Override
    @Transactional
    /**
     * Get Assignment from dao and
     * convert AssignmentDto to Assignment
     *
     */
    public AssignmentDto getById(Long id) {
        Assignment ass = assignmentDAO.getById(id);
        return convertAssignmentToDto(ass);
    }

    /**
     * Delete Assignment by Id
     *
     * @param assId
     */
    @Override
    public void deleteEventsByAssId(Long assId) throws JMSException {
        eventDAO.deleteByAssignmentId(assId);
    }

    /**
     * Generate events by Assignment id.
     *
     * @param assId
     */
    @Transactional
    @Override
    public void generateEventsByAssId(Long assId) {
        Assignment a = assignmentDAO.getById(assId);
        Patient patient = a.getPatient();
        List<String> weeks = Arrays.asList(a.getTimesPerWeek().split(" "));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-d");
        LocalDate startDate = LocalDate.parse(a.getDateFrom(), formatter);
        LocalDate endDate = LocalDate.parse(a.getDateTo(), formatter);
        //идем по всем дням от и до
        for (LocalDate date = startDate; date.isBefore(endDate); date = date.plusDays(1)) {
            //если в этом периоде день недели совпадает с нужным
            if (weeks.contains(String.valueOf(date.getDayOfWeek().getValue()))) {
                if (a.getMorningTime() != null) {
                    Event event = new Event();
                    event.setAssignment(a);
                    event.setPatientName(patient.getLastName());
                    event.setStatus(ApplicationConstant.EVENT_STATUS_SHEDULED);
                    event.setComments(ApplicationConstant.DEFAULT_COMMENTS);
                    event.setDate(date.toString());
                    event.setTime(a.getMorningTime());
                    eventDAO.addEvent(event);
                }
                if (a.getAfternoonTime() != null) {
                    Event event = new Event();
                    event.setAssignment(a);
                    event.setPatientName(patient.getLastName());
                    event.setStatus(ApplicationConstant.EVENT_STATUS_SHEDULED);
                    event.setComments(ApplicationConstant.DEFAULT_COMMENTS);
                    event.setDate(date.toString());
                    event.setTime(a.getAfternoonTime());
                    eventDAO.addEvent(event);
                }
                if (a.getEveningTime() != null) {
                    Event event = new Event();
                    event.setAssignment(a);
                    event.setPatientName(patient.getLastName());
                    event.setStatus(ApplicationConstant.EVENT_STATUS_SHEDULED);
                    event.setComments(ApplicationConstant.DEFAULT_COMMENTS);
                    event.setDate(date.toString());
                    event.setTime(a.getEveningTime());
                    eventDAO.addEvent(event);
                }
            }
        }
    }

    public static AssignmentDto convertAssignmentToDto(Assignment assignment){
        AssignmentDto assignmentDto = new AssignmentDto();
        assignmentDto.setId(assignment.getId());
        assignmentDto.setName(assignment.getName());
        assignmentDto.setType(assignment.getType());
  //      assignmentDto.setTimePattern(assignment.getTimePattern());
        assignmentDto.setWeeks(assignment.getTimesPerWeek().split("  "));
        assignmentDto.setTime1(assignment.getMorningTime());
        assignmentDto.setTime2(assignment.getAfternoonTime());
        assignmentDto.setTime3(assignment.getEveningTime());
        assignmentDto.setDateFrom(assignment.getDateFrom());
        assignmentDto.setDateTo(assignment.getDateTo());
        assignmentDto.setDoze(assignment.getDoze());
        assignmentDto.setPeriod(assignment.getDateFrom() + " - " + assignment.getDateTo());
        return assignmentDto;
    }

    public static Assignment convertDtoToAssignment(Assignment assignment, AssignmentDto assignmentDto){
        assignment.setType(assignmentDto.getType());
        assignment.setName(assignmentDto.getName());
        assignment.setDateFrom(assignmentDto.getDateFrom());
        assignment.setDateTo(assignmentDto.getDateTo());
        assignment.setDoze(assignmentDto.getDoze());
        assignment.setMorningTime(assignmentDto.getTime1());
        assignment.setAfternoonTime(assignmentDto.getTime2());
        assignment.setEveningTime(assignmentDto.getTime3());
        StringBuilder tp = new StringBuilder();
        for (String s : assignmentDto.getWeeks()) {
            tp.append(s);
            tp.append(" ");
        }
       assignment.setTimesPerWeek(tp.toString());
        return assignment;
    }
}



